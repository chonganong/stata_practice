values.happy[row,col]=NA
} else {
values.happy[row,col]=1
}
}
} #end of col loop
} #end of row loop
print(paste("Percent Happy:", (sum(values.happy,na.rm=T)/sum(values.mat!=0,na.rm=T)),
"Iteration", i))
p <- (qplot(x=Var1, y=Var2, data=melt(values.mat), fill=value, geom="tile", color = "white", main= paste("SCHELLING GRID:",i))
+  scale_fill_gradient2(low = "lightgreen", mid = "white", high = "steelblue")  ) + theme(legend.position = "none")
if (i %% 5 == 0) print(p)
} #end of while loop
values.happy = matrix(NA, gs,gs)
while ((sum(values.happy,na.rm=T)/sum(values.mat!=0,na.rm=T))<stop.val){
for(row in sample(1:gs)){
for (col in sample(1:gs)){
if( row>1 & col>1)                  nbrs[1] <- values.mat[row -1, col -1]
if( row>1)                          nbrs[2] <- values.mat[row -1, col   ]
if( row>1 & col<grid.size)          nbrs[3] <- values.mat[row -1, col +1]
if( col>1)                          nbrs[4] <- values.mat[row   , col -1]
if( col<grid.size)                  nbrs[5] <- values.mat[row   , col +1]
if( row<grid.size & col>1)          nbrs[6] <- values.mat[row +1, col -1]
if( row<grid.size )                 nbrs[7] <- values.mat[row +1, col   ]
if( row<grid.size & col<grid.size)  nbrs[8] <- values.mat[row +1, col +1]
val=values.mat[row,col]
if (val!=0){
hap.rat=sum(nbrs==val,na.rm=T)/sum(ls.na(nbrs))
if (hap.rat < happy.val){
values.mat[row,col]=0 #empty this unit
newhome=sample(which(values.mat==0),1)
values.mat[newhome]=0
values.happy[row,col]=NA
} else {
values.happy[row,col]=1
}
}
} #end of col loop
} #end of row loop
print(paste("Percent Happy:", (sum(values.happy,na.rm=T)/sum(values.mat!=0,na.rm=T)),
"Iteration", i))
p <- (qplot(x=Var1, y=Var2, data=melt(values.mat), fill=value, geom="tile", color = "white", main= paste("SCHELLING GRID:",i))
+  scale_fill_gradient2(low = "lightgreen", mid = "white", high = "steelblue")  ) + theme(legend.position = "none")
if (i %% 5 == 0) print(p)
} #end of while loop
while ((sum(values.happy,na.rm=T)/sum(values.mat!=0,na.rm=T))<stop.val){
for(row in sample(1:gs)){
for (col in sample(1:gs)){
nbrs = c(rep(NA,8))
if( row>1 & col>1)                  nbrs[1] <- values.mat[row -1, col -1]
if( row>1)                          nbrs[2] <- values.mat[row -1, col   ]
if( row>1 & col<grid.size)          nbrs[3] <- values.mat[row -1, col +1]
if( col>1)                          nbrs[4] <- values.mat[row   , col -1]
if( col<grid.size)                  nbrs[5] <- values.mat[row   , col +1]
if( row<grid.size & col>1)          nbrs[6] <- values.mat[row +1, col -1]
if( row<grid.size )                 nbrs[7] <- values.mat[row +1, col   ]
if( row<grid.size & col<grid.size)  nbrs[8] <- values.mat[row +1, col +1]
val=values.mat[row,col]
if (val!=0){
hap.rat=sum(nbrs==val,na.rm=T)/sum(ls.na(nbrs))
if (hap.rat < happy.val){
values.mat[row,col]=0 #empty this unit
newhome=sample(which(values.mat==0),1)
values.mat[newhome]=0
values.happy[row,col]=NA
} else {
values.happy[row,col]=1
}
}
} #end of col loop
} #end of row loop
print(paste("Percent Happy:", (sum(values.happy,na.rm=T)/sum(values.mat!=0,na.rm=T)),
"Iteration", i))
p <- (qplot(x=Var1, y=Var2, data=melt(values.mat), fill=value, geom="tile", color = "white", main= paste("SCHELLING GRID:",i))
+  scale_fill_gradient2(low = "lightgreen", mid = "white", high = "steelblue")  ) + theme(legend.position = "none")
if (i %% 5 == 0) print(p)
} #end of while loop
while ((sum(values.happy,na.rm=T)/sum(values.mat!=0,na.rm=T))<stop.val){
for(row in sample(1:gs)){
for (col in sample(1:gs)){
nbrs = c(rep(NA,8))
if( row>1 & col>1)                  nbrs[1] <- values.mat[row -1, col -1]
if( row>1)                          nbrs[2] <- values.mat[row -1, col   ]
if( row>1 & col<gs)          nbrs[3] <- values.mat[row -1, col +1]
if( col>1)                          nbrs[4] <- values.mat[row   , col -1]
if( col<gs)                  nbrs[5] <- values.mat[row   , col +1]
if( row<gs & col>1)          nbrs[6] <- values.mat[row +1, col -1]
if( row<gs )                 nbrs[7] <- values.mat[row +1, col   ]
if( row<gs & col<gs)  nbrs[8] <- values.mat[row +1, col +1]
val=values.mat[row,col]
if (val!=0){
hap.rat=sum(nbrs==val,na.rm=T)/sum(ls.na(nbrs))
if (hap.rat < happy.val){
values.mat[row,col]=0 #empty this unit
newhome=sample(which(values.mat==0),1)
values.mat[newhome]=0
values.happy[row,col]=NA
} else {
values.happy[row,col]=1
}
}
} #end of col loop
} #end of row loop
print(paste("Percent Happy:", (sum(values.happy,na.rm=T)/sum(values.mat!=0,na.rm=T)),
"Iteration", i))
p <- (qplot(x=Var1, y=Var2, data=melt(values.mat), fill=value, geom="tile", color = "white", main= paste("SCHELLING GRID:",i))
+  scale_fill_gradient2(low = "lightgreen", mid = "white", high = "steelblue")  ) + theme(legend.position = "none")
if (i %% 5 == 0) print(p)
} #end of while loop
while ((sum(values.happy,na.rm=T)/sum(values.mat!=0,na.rm=T))<stop.val){
for(row in sample(1:gs)){
for (col in sample(1:gs)){
nbrs = c(rep(NA,8))
if( row>1 & col>1)                  nbrs[1] <- values.mat[row -1, col -1]
if( row>1)                          nbrs[2] <- values.mat[row -1, col   ]
if( row>1 & col<gs)          nbrs[3] <- values.mat[row -1, col +1]
if( col>1)                          nbrs[4] <- values.mat[row   , col -1]
if( col<gs)                  nbrs[5] <- values.mat[row   , col +1]
if( row<gs & col>1)          nbrs[6] <- values.mat[row +1, col -1]
if( row<gs )                 nbrs[7] <- values.mat[row +1, col   ]
if( row<gs & col<gs)  nbrs[8] <- values.mat[row +1, col +1]
val=values.mat[row,col]
if (val!=0){
hap.rat=sum(nbrs==val,na.rm=T)/sum(is.na(nbrs))
if (hap.rat < happy.val){
values.mat[row,col]=0 #empty this unit
newhome=sample(which(values.mat==0),1)
values.mat[newhome]=0
values.happy[row,col]=NA
} else {
values.happy[row,col]=1
}
}
} #end of col loop
} #end of row loop
print(paste("Percent Happy:", (sum(values.happy,na.rm=T)/sum(values.mat!=0,na.rm=T)),
"Iteration", i))
p <- (qplot(x=Var1, y=Var2, data=melt(values.mat), fill=value, geom="tile", color = "white", main= paste("SCHELLING GRID:",i))
+  scale_fill_gradient2(low = "lightgreen", mid = "white", high = "steelblue")  ) + theme(legend.position = "none")
if (i %% 5 == 0) print(p)
} #end of while loop
while ((sum(values.happy,na.rm=T)/sum(values.mat!=0,na.rm=T))<stop.val){
for(row in sample(1:gs)){
for (col in sample(1:gs)){
nbrs = c(rep(NA,8))
if( row>1 & col>1)                  nbrs[1] <- values.mat[row -1, col -1]
if( row>1)                          nbrs[2] <- values.mat[row -1, col   ]
if( row>1 & col<gs)          nbrs[3] <- values.mat[row -1, col +1]
if( col>1)                          nbrs[4] <- values.mat[row   , col -1]
if( col<gs)                  nbrs[5] <- values.mat[row   , col +1]
if( row<gs & col>1)          nbrs[6] <- values.mat[row +1, col -1]
if( row<gs )                 nbrs[7] <- values.mat[row +1, col   ]
if( row<gs & col<gs)  nbrs[8] <- values.mat[row +1, col +1]
val=values.mat[row,col]
if (val!=0){
hap.rat=sum(nbrs==val,na.rm=T)/sum(is.na(nbrs))
if (hap.rat < happy.val){
values.mat[row,col]=0 #empty this unit
newhome=sample(which(values.mat==0),1)
values.mat[newhome]=0
values.happy[row,col]=NA
} else {
values.happy[row,col]=1
}
}
} #end of col loop
} #end of row loop
print(paste("Percent Happy:", (sum(values.happy,na.rm=T)/sum(values.mat!=0,na.rm=T)),
"Iteration", i))
p <- (qplot(x=Var1, y=Var2, data=melt(values.mat), fill=value, geom="tile", color = "white", main= paste("SCHELLING GRID:",i))
+  scale_fill_gradient2(low = "lightgreen", mid = "white", high = "steelblue")  ) + theme(legend.position = "none")
if (i %% 5 == 0) print(p)
} #end of while loop
while ((sum(values.happy,na.rm=T)/sum(values.mat!=0,na.rm=T))<stop.val){
for(row in sample(1:gs)){
for (col in sample(1:gs)){
nbrs = c(rep(NA,8))
if( row>1 & col>1)                  nbrs[1] <- values.mat[row -1, col -1]
if( row>1)                          nbrs[2] <- values.mat[row -1, col   ]
if( row>1 & col<gs)          nbrs[3] <- values.mat[row -1, col +1]
if( col>1)                          nbrs[4] <- values.mat[row   , col -1]
if( col<gs)                  nbrs[5] <- values.mat[row   , col +1]
if( row<gs & col>1)          nbrs[6] <- values.mat[row +1, col -1]
if( row<gs )                 nbrs[7] <- values.mat[row +1, col   ]
if( row<gs & col<gs)  nbrs[8] <- values.mat[row +1, col +1]
val=values.mat[row,col]
if (val!=0){
hap.rat=sum(nbrs==val,na.rm=T)/sum(is.na(nbrs))
if (hap.rat < happy.val){
values.mat[row,col]=0 #empty this unit
newhome=sample(which(values.mat==0),1)
values.mat[newhome]=val
values.happy[newhome]=0
values.happy[row,col]=NA
} else {
values.happy[row,col]=1
}
}
} #end of col loop
} #end of row loop
print(paste("Percent Happy:", (sum(values.happy,na.rm=T)/sum(values.mat!=0,na.rm=T)),
"Iteration", i))
p <- (qplot(x=Var1, y=Var2, data=melt(values.mat), fill=value, geom="tile", color = "white", main= paste("SCHELLING GRID:",i))
+  scale_fill_gradient2(low = "lightgreen", mid = "white", high = "steelblue")  ) + theme(legend.position = "none")
if (i %% 5 == 0) print(p)
} #end of while loop
while ((sum(values.happy,na.rm=T)/sum(values.mat!=0,na.rm=T))<stop.val){
for(row in sample(1:gs)){
for (col in sample(1:gs)){
nbrs = c(rep(NA,8))
if( row>1 & col>1)                  nbrs[1] <- values.mat[row -1, col -1]
if( row>1)                          nbrs[2] <- values.mat[row -1, col   ]
if( row>1 & col<gs)          nbrs[3] <- values.mat[row -1, col +1]
if( col>1)                          nbrs[4] <- values.mat[row   , col -1]
if( col<gs)                  nbrs[5] <- values.mat[row   , col +1]
if( row<gs & col>1)          nbrs[6] <- values.mat[row +1, col -1]
if( row<gs )                 nbrs[7] <- values.mat[row +1, col   ]
if( row<gs & col<gs)  nbrs[8] <- values.mat[row +1, col +1]
val=values.mat[row,col]
if (val!=0){
hap.rat=sum(nbrs==val,na.rm=T)/sum(!is.na(nbrs))
if (hap.rat < happy.val){
values.mat[row,col]=0 #empty this unit
newhome=sample(which(values.mat==0),1)
values.mat[newhome]=val
values.happy[newhome]=0
values.happy[row,col]=NA
} else {
values.happy[row,col]=1
}
}
} #end of col loop
} #end of row loop
print(paste("Percent Happy:", (sum(values.happy,na.rm=T)/sum(values.mat!=0,na.rm=T)),
"Iteration", i))
p <- (qplot(x=Var1, y=Var2, data=melt(values.mat), fill=value, geom="tile", color = "white", main= paste("SCHELLING GRID:",i))
+  scale_fill_gradient2(low = "lightgreen", mid = "white", high = "steelblue")  ) + theme(legend.position = "none")
if (i %% 5 == 0) print(p)
} #end of while loop
rm(list=ls())
library(ggplot2)
library(reshape2)
gs=100
probabilities=c(.45,.45,.1)
stop.val=.98
happy.val=.4
values=c(-1,1,0)
values.mat=matrix(sample(values,size=100*100,
prob=probabilities,replace=T),
gs, gs)
p <- (qplot(x=Var1, y=Var2, data=melt(values.mat), fill=value, geom="tile", color = "white", main="SCHELLING GRID: 0")
+  scale_fill_gradient2(low = "lightgreen", mid = "white", high = "steelblue")  ) + theme(legend.position = "none")
i=1
values.happy = matrix(NA, gs,gs)
while ((sum(values.happy,na.rm=T)/sum(values.mat!=0,na.rm=T))<stop.val){
for(row in sample(1:gs)){
for (col in sample(1:gs)){
nbrs = c(rep(NA,8))
if( row>1 & col>1)                  nbrs[1] <- values.mat[row -1, col -1]
if( row>1)                          nbrs[2] <- values.mat[row -1, col   ]
if( row>1 & col<gs)          nbrs[3] <- values.mat[row -1, col +1]
if( col>1)                          nbrs[4] <- values.mat[row   , col -1]
if( col<gs)                  nbrs[5] <- values.mat[row   , col +1]
if( row<gs & col>1)          nbrs[6] <- values.mat[row +1, col -1]
if( row<gs )                 nbrs[7] <- values.mat[row +1, col   ]
if( row<gs & col<gs)  nbrs[8] <- values.mat[row +1, col +1]
val=values.mat[row,col]
if (val!=0){
hap.rat=sum(nbrs==val,na.rm=T)/sum(!is.na(nbrs))
if (hap.rat < happy.val){
values.mat[row,col]=0 #empty this unit
newhome=sample(which(values.mat==0),1)
values.mat[newhome]=val
values.happy[newhome]=0
values.happy[row,col]=NA
} else {
values.happy[row,col]=1
}
}
} #end of col loop
} #end of row loop
print(paste("Percent Happy:", (sum(values.happy,na.rm=T)/sum(values.mat!=0,na.rm=T)),
"Iteration", i))
p <- (qplot(x=Var1, y=Var2, data=melt(values.mat), fill=value, geom="tile", color = "white", main= paste("SCHELLING GRID:",i))
+  scale_fill_gradient2(low = "lightgreen", mid = "white", high = "steelblue")  ) + theme(legend.position = "none")
i=i+1
if (i %% 5 == 0) print(p)
} #end of while loop
rm(list=ls())
library(ggplot2)
library(reshape2)
gs=100
probabilities=c(.40,.50,.1)
stop.val=.98
happy.val=.4
values=c(-1,1,0)
values.mat=matrix(sample(values,size=100*100,
prob=probabilities,replace=T),
gs, gs)
p <- (qplot(x=Var1, y=Var2, data=melt(values.mat), fill=value, geom="tile", color = "white", main="SCHELLING GRID: 0")
+  scale_fill_gradient2(low = "lightgreen", mid = "white", high = "steelblue")  ) + theme(legend.position = "none")
i=1
values.happy = matrix(NA, gs,gs)
while ((sum(values.happy,na.rm=T)/sum(values.mat!=0,na.rm=T))<stop.val){
for(row in sample(1:gs)){
for (col in sample(1:gs)){
nbrs = c(rep(NA,8))
if( row>1 & col>1)                  nbrs[1] <- values.mat[row -1, col -1]
if( row>1)                          nbrs[2] <- values.mat[row -1, col   ]
if( row>1 & col<gs)          nbrs[3] <- values.mat[row -1, col +1]
if( col>1)                          nbrs[4] <- values.mat[row   , col -1]
if( col<gs)                  nbrs[5] <- values.mat[row   , col +1]
if( row<gs & col>1)          nbrs[6] <- values.mat[row +1, col -1]
if( row<gs )                 nbrs[7] <- values.mat[row +1, col   ]
if( row<gs & col<gs)  nbrs[8] <- values.mat[row +1, col +1]
val=values.mat[row,col]
if (val!=0){
hap.rat=sum(nbrs==val,na.rm=T)/sum(!is.na(nbrs))
if (hap.rat < happy.val){
values.mat[row,col]=0 #empty this unit
newhome=sample(which(values.mat==0),1)
values.mat[newhome]=val
values.happy[newhome]=0
values.happy[row,col]=NA
} else {
values.happy[row,col]=1
}
}
} #end of col loop
} #end of row loop
print(paste("Percent Happy:", (sum(values.happy,na.rm=T)/sum(values.mat!=0,na.rm=T)),
"Iteration", i))
p <- (qplot(x=Var1, y=Var2, data=melt(values.mat), fill=value, geom="tile", color = "white", main= paste("SCHELLING GRID:",i))
+  scale_fill_gradient2(low = "lightgreen", mid = "white", high = "steelblue")  ) + theme(legend.position = "none")
i=i+1
if (i %% 5 == 0) print(p)
} #end of while loop
rm(list=ls())
library(ggplot2)
library(reshape2)
gs=100
probabilities=c(.40,.50,.1)
stop.val=.99
happy.val=.4
values=c(-1,1,0)
values.mat=matrix(sample(values,size=100*100,
prob=probabilities,replace=T),
gs, gs)
p <- (qplot(x=Var1, y=Var2, data=melt(values.mat), fill=value, geom="tile", color = "white", main="SCHELLING GRID: 0")
+  scale_fill_gradient2(low = "lightgreen", mid = "white", high = "steelblue")  ) + theme(legend.position = "none")
i=1
values.happy = matrix(NA, gs,gs)
while ((sum(values.happy,na.rm=T)/sum(values.mat!=0,na.rm=T))<stop.val){
for(row in sample(1:gs)){
for (col in sample(1:gs)){
nbrs = c(rep(NA,8))
if( row>1 & col>1)                  nbrs[1] <- values.mat[row -1, col -1]
if( row>1)                          nbrs[2] <- values.mat[row -1, col   ]
if( row>1 & col<gs)          nbrs[3] <- values.mat[row -1, col +1]
if( col>1)                          nbrs[4] <- values.mat[row   , col -1]
if( col<gs)                  nbrs[5] <- values.mat[row   , col +1]
if( row<gs & col>1)          nbrs[6] <- values.mat[row +1, col -1]
if( row<gs )                 nbrs[7] <- values.mat[row +1, col   ]
if( row<gs & col<gs)  nbrs[8] <- values.mat[row +1, col +1]
val=values.mat[row,col]
if (val!=0){
hap.rat=sum(nbrs==val,na.rm=T)/sum(!is.na(nbrs))
if (hap.rat < happy.val){
values.mat[row,col]=0 #empty this unit
newhome=sample(which(values.mat==0),1)
values.mat[newhome]=val
values.happy[newhome]=0
values.happy[row,col]=NA
} else {
values.happy[row,col]=1
}
}
} #end of col loop
} #end of row loop
print(paste("Percent Happy:", (sum(values.happy,na.rm=T)/sum(values.mat!=0,na.rm=T)),
"Iteration", i))
p <- (qplot(x=Var1, y=Var2, data=melt(values.mat), fill=value, geom="tile", color = "white", main= paste("SCHELLING GRID:",i))
+  scale_fill_gradient2(low = "lightgreen", mid = "white", high = "steelblue")  ) + theme(legend.position = "none")
i=i+1
if (i %% 5 == 0) print(p)
} #end of while loop
rm(list=ls())
library(ggplot2)
library(reshape2)
gs=100
probabilities=c(.40,.50,.1)
stop.val=.99
happy.val=.4
values=c(-1,1,0)
values.mat=matrix(sample(values,size=100*100,
prob=probabilities,replace=T),
gs, gs)
p <- (qplot(x=Var1, y=Var2, data=melt(values.mat), fill=value, geom="tile", color = "white", main="SCHELLING GRID: 0")
+  scale_fill_gradient2(low = "lightgreen", mid = "white", high = "steelblue")  ) + theme(legend.position = "none")
i=1
values.happy = matrix(NA, gs,gs)
while ((sum(values.happy,na.rm=T)/sum(values.mat!=0,na.rm=T))<stop.val){
for(row in sample(1:gs)){
for (col in sample(1:gs)){
nbrs = c(rep(NA,8))
if( row>1 & col>1)                  nbrs[1] <- values.mat[row -1, col -1]
if( row>1)                          nbrs[2] <- values.mat[row -1, col   ]
if( row>1 & col<gs)          nbrs[3] <- values.mat[row -1, col +1]
if( col>1)                          nbrs[4] <- values.mat[row   , col -1]
if( col<gs)                  nbrs[5] <- values.mat[row   , col +1]
if( row<gs & col>1)          nbrs[6] <- values.mat[row +1, col -1]
if( row<gs )                 nbrs[7] <- values.mat[row +1, col   ]
if( row<gs & col<gs)  nbrs[8] <- values.mat[row +1, col +1]
val=values.mat[row,col]
if (val!=0){
hap.rat=sum(nbrs==val,na.rm=T)/sum(!is.na(nbrs))
if (hap.rat < happy.val){
values.mat[row,col]=0 #empty this unit
newhome=sample(which(values.mat==0),1)
values.mat[newhome]=val
values.happy[newhome]=0
values.happy[row,col]=NA
} else {
values.happy[row,col]=1
}
}
} #end of col loop
} #end of row loop
print(paste("Percent Happy:", (sum(values.happy,na.rm=T)/sum(values.mat!=0,na.rm=T)),
"Iteration", i))
p <- (qplot(x=Var1, y=Var2, data=melt(values.mat), fill=value, geom="tile", color = "white", main= paste("SCHELLING GRID:",i))
+  scale_fill_gradient2(low = "lightgreen", mid = "white", high = "steelblue")  ) + theme(legend.position = "none")
i=i+1
if (i %% 5 == 0) print(p)
} #end of while loop
print(p)
data(CPS1988)
CPS1988[education>=12, list(
avg_wage = mean(wage),
median_wage = median(wage),
var_wage = var(wage),
distinct_edu = length(unique(education)),
observations = .N,
missing_wage         = sum(is.na(wage))), by=parttime]
CPS1988[, list(avg_wage = mean(wage), median_educ = median(education))]
summarize(clean$Home_state)
library("dplyr", lib.loc="~/R/win-library/3.3")
library("reader", lib.loc="~/R/win-library/3.3")
setwd("C:\Users\Chong An\Documents\GitHub\stata_practice\data")
getwd
getwd()
?install.packages
rm(list=ls())
library(reader)
library(dplyr)
setwd("~\stata_practice\data")
C:\Users\Chong An\Documents\GitHub
setwd("C:\Users\Chong An\Documents\GitHub\stata_practice\data")
setwd("~/GitHub/stata_practice/data")
setwd("`\GitHub\stata_practice\data")
setwd("`/GitHub/stata_practice/data")
setwd("~/GitHub/stata_practice/data")
clean <- lapply(list.files(,pattern="*.csv"), read.csv) %>%              # reads a list of .csv files into a list of data-frames
bind_rows %>%                                                # appends them into a single data-frame
select(Competition_Month, Competition_Year,
Home_City, Home_Section, Home_State, Points, Rank)    # drops unwanted variables
setwd("~/stata-practice-test-chongan")
clean <- clean %>% mutate(Home_State = replace(Home_State, Home_City=="Guam","GU"))
clean <- clean %>% mutate(Home_State = replace(Home_State, Home_State=="Fl","FL"))
clean <- clean %>% mutate(Home_State = replace(Home_State, nchar(Home_State)!=2, "Foreign"))
clean <- clean %>% mutate(Home_State = replace(Home_State, Home_State== "AB" | Home_State== "BC" |
Home_State== "CZ" | Home_State== "ON" |
Home_State== "PQ" | Home_State== "QC" |
Home_State== "ZH", "Foreign" ))
clean <- clean %>% mutate(Home_State = replace(Home_State, Home_State== "AS" | Home_State== "GU" |
Home_State== "MP" | Home_State== "PR" |
Home_State== "UM" | Home_State== "VI", "Territory"))
clean$Home_State <- factor(clean$Home_State)
clean <- clean %>% mutate(Hill_Indicator = 0)
clean <- clean %>% mutate(Hill_Indicator = replace(Hill_Indicator,
grepl("Hill", Home_City, ignore.case=F),
1))
clean <- clean %>%
group_by(Home_State) %>%
mutate(Home_State_Mean = mean(Points))
clean$Home_Section <- factor(clean$Home_Section)
clean <- clean %>%
group_by(Home_Section, Competition_Year) %>%
mutate(Home_Section_Count = n())
t.test(Points~Hill_Indicator, clean)
summarize(clean$Home_state)
summary(clean$Home_state)
summary(clean$Home_state)
summary(clean$Home_State)
xtable(summary(clean$Home_State))
library("xtable", lib.loc="~/R/win-library/3.3")
xtable(summary(clean$Home_State))
library("stargazer", lib.loc="~/R/win-library/3.3")
stargazer(summary(clean$Home_State))
stargazer(summary(clean$Home_State), type = "text")
?stargazer
stargazer(summary(clean$Home_State), flip=T, type = "text")
?lm
reg1<-lm(rank~points)
reg1<-lm(Rank~Points)
reg1<-lm(Rank~Points, data=clean)
reg2<-lm(Rank~Points+Home_State, data=clean)
reg3<-lm(Rank~Points+Home_State+as.Factor(Competition_Year), data=clean)
?as.Factor
reg3<-lm(Rank~Points+Home_State+as.factor(Competition_Year), data=clean)
stargazer(reg1,reg2,reg3)
stargazer(reg1,reg2,reg3, type="text")
